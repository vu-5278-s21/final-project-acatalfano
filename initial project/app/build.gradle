/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

group = 'edu.vanderbilt.cs'
sourceCompatibility = '8'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.0-jre'

    implementation 'commons-io:commons-io:2.6'
}

application {
    // Define the main class for the application.
    mainClass = 'finalproject.App'
}

//task fatJar(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'finalproject.App'
//    }
//    dependsOn configurations.runtimeClasspath
//    archiveBaseName = project.name + '-all'
//    from { configurations.compile.collect {it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

jar {
    manifest {
        attributes 'Main-Class': 'finalproject.App'
    }
    //TODO: get the zipTree working somehow???
}

//jar {
//    project.rootProject.subprojects.each( {aproject ->
//        if ( project != aproject ) { // avoid recursion
//            aproject.tasks.withType(Jar).each
//
//                    {archiveTask -> from zipTree( archiveTask.archiveFile ) }
//        }
//    })
//
//    manifest {
//        attributes 'Main-Class': 'finalproject.App'
//    }
//}

//tasks.register('uberJar', Jar) {
//    archiveClassifier = 'uber'
//    manifest {
//        attributes 'Main-Class': 'finalproject.App'
//    }
//    from sourceSets.main.output
//
//    dependsOn configurations.runtimeClasspath
////    from {
////        //configurations.runtimeClasspath.findAll {}
////        //configurations.runtimeClasspath.findAll { it.name.endsWith('jar')}.collect {zipTree(it)}
////    }
//}

//jar {
//    manifest {
//        attributes(
//                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
//                'Main-Class': 'finalproject.App'
//        )
//    }
//}
